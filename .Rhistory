),
iter = 1000,
warmup = 500,
chains = 2)
source("~/Documents/GitHub/bayesian-methods/project.R")
source("~/Documents/GitHub/bayesian-methods/project.R")
View(stan_output)
summary(stan_output)
help(structure)
names(fit)[1:ncol(X)] <- colnames(X)
sigma <- as.matrix(fit)[, "sigma"]
sigma <- as.matrix(stan_output)[, "sigma"]
names(stan_output)[1:ncol(X)] <- colnames(X)
structure(list(fit=stan_output,
coef_names=colnames(X),
sigma=sigma,
L=L,
terms=terms(formula, data=data),
data=data),
class=c("stan_tobit_lower", "stan_wrapper"))
structure(list(fit=stan_output,
coef_names=colnames(X),
sigma=sigma,
U=U,
terms=terms(formula, data=data),
data=data),
class=c("stan_tobit_lower", "stan_wrapper"))
names(stan_output)[1:ncol(X)] <- colnames(X)
structure(list(fit=stan_output,
coef_names=colnames(X),
sigma=sigma,
U=U,
terms=terms(formula, data=data),
data=data),
class=c("stan_tobit_lower", "stan_wrapper"))
names
structure(list(fit=stan_output,
coef_names=colnames(X),
sigma=sigma,
U=U,
terms=terms(y~marital.happiness + age + no.years.married, data=data),
data=data),
class=c("stan_tobit_lower", "stan_wrapper"))
structure(1:6, dim = 2:3)
list(fit=stan_output,
coef_names=colnames(X),
sigma=sigma,
U=U,
terms=terms(y~marital.happiness + age + no.years.married, data=data),
data=data),
class=c("stan_tobit_lower", "stan_wrapper")
terms(y~marital.happiness + age + no.years.married, data=data)
list(fit=stan_output,
coef_names=colnames(X),
sigma=sigma,
U=U,
terms=terms(y~marital.happiness + age + no.years.married, data=data),
data=data)
structure(list(fit=stan_output,
coef_names=colnames(X),
sigma=sigma,
U=U,
terms=terms(y~marital.happiness + age + no.years.married, data=data),
data=data),
class=c("stan_tobit_upper", "stan_wrapper"))
stan_output
head(stan_output)
stan_output <-stan(file = "~/Documents/GitHub/bayesian-methods/truncate_data.stan",
data= list(
N_obs = nrow(X_obs),
N_cens = nrow(X_cens),
K = K,
X_obs = X_obs,
X_cens = X_cens,
y_obs = y_obs,
U=U
))
summary(stan_output)
stan_output
sigma <- as.matrix(stan_output)[, "sigma"]
names(stan_output)[1:ncol(X)] <- colnames(X)
structure(list(fit=stan_output,
coef_names=colnames(X),
sigma=sigma,
U=U,
terms=terms(y~marital.happiness + age + no.years.married, data=data),
data=data),
class=c("stan_tobit_upper", "stan_wrapper"))
s <- structure(list(fit=stan_output,
coef_names=colnames(X),
sigma=sigma,
U=U,
terms=terms(y~marital.happiness + age + no.years.married, data=data),
data=data),
class=c("stan_tobit_upper", "stan_wrapper"))
s
s[0-]
s[0]
s[1]
col_names(X)
colnames(X)
names(stan_output)
names(stan_output)[1:ncol(X)]
typeof(s)
typeof(s[1])
hist(s[1])
s[1]$y
s[1]
hist(stan_output)
stan_output
dataa %>%
n <- 100
fake_tobit <- tibble(x = runif(n, -5, 5),
z = rnorm(n, 2*x + 2, 1),
y = if_else(z > 0, z, 0))
n <- 100
fake_tobit <- tibble(x = runif(n, -5, 5),
z = rnorm(n, 2*x + 2, 1),
y = if_else(z > 0, z, 0))
fake_tobit %>%
gf_point(y ~ x) %>%
gf_line(if_else(2*x+2 > 0, 2*x+2, 0) ~ x, data=data.frame(x=seq(-5,5,by=0.1)))
s
s[1]
s["stan_tobit_upper"]
s["stan_wrapper"]
stan_output
data
s$terms
s$data
mm <- model.matrix(delete.response(s$terms), data=s$data)
coef_matrix <- as.matrix(s$fit)
coef_matrix <- coef_matrix[sample.int(nrow(coef_matrix),50), , drop=FALSE]
point_preds <-coef_matrix[,s$coef_names, drop=FALSE] %*% t(mm)
preds <- rnorm_matrix(point_preds, object$sigma)
preds <- rnorm_matrix(point_preds, s$sigma)
point_preds <-coef_matrix[,s$coef_names, drop=FALSE] %*% t(mm)
preds <- rnorm_matrix(point_preds, s$sigma)
preds <- rnorm(point_preds, s$sigma)
preds <- matrix(if_else(preds < object$U, preds, s$U), ncol=nrow(mm))
preds <- matrix(ifelse(preds < object$U, preds, s$U), ncol=nrow(mm))
preds <- matrix(ifelse(preds < s$U, preds, s$U), ncol=nrow(mm))
colnames(preds) <- rownames(newdata)
preds
colnames(preds) <- rownames(data)
preds
View(s)
View(preds)
View(preds)
mm <- model.matrix(delete.response(s$terms), data=s$data)
mm
coef_matrix <- as.matrix(s$fit)
coef_matrix <- coef_matrix[sample.int(nrow(coef_matrix),50), , drop=FALSE]
point_preds <-coef_matrix[,s$coef_names, drop=FALSE] %*% t(mm)
preds <- rnorm(point_preds, s$sigma)
preds <- matrix(ifelse(preds < s$U, preds, s$U), ncol=nrow(mm))
colnames(preds) <- rownames(data)
preds
head(preds)
rnorm(point_preds, s$sigma)rnorm(point_preds, s$sigma)
rnorm(point_preds, s$sigma)
preds <- matrix(rnorm(point_preds, s$sigma))
preds <- matrix(ifelse(preds < s$U, preds, s$U), ncol=nrow(mm))
colnames(preds) <- rownames(data)
preds
hist(preds)
colnames(preds)
head(preds)
summary(stan_output)
extract(stan_output)
stan_ouput.pars
stan_ouput$pars
summary(stan_output, para=c("X_obs","y_obs"))
y_obs
X_obs
stan_output <-stan(file = "~/Documents/GitHub/bayesian-methods/truncate_data.stan",
data= list(
N_obs = nrow(X_obs),
N_cens = nrow(X_cens),
K = K,
X_obs = X_obs,
X_cens = X_cens,
y_obs = y_obs,
U=U
),
iter = 1000,
warmup = 500,
chains = 2)
rstan:::rstudio_stanc("Documents/GitHub/bayesian-methods/truncate_data.stan")
stan_output <-stan(file = "~/Documents/GitHub/bayesian-methods/truncate_data.stan",
data= list(
N_obs = nrow(X_obs),
N_cens = nrow(X_cens),
y_obs = y_obs,
U=U
),
iter = 1000,
warmup = 500,
chains = 2)
summary(stan_output)
View(data)
View(data)
summary(data$y)
stan_output
stan_output$mu
stan_output$`y_cens[1]`
s$fit
stan_output
summary(stan_output)
hist(stan_output)
hist(stan_output$`y_cens[1]`)
N_cens
nrow(X_cens\)
nrow(X_cens)
summary(stan_output)
summary(stan_output)
sigma <- as.matrix(stan_output)[, "sigma"]
sigma
names(stan_output)[1:ncol(X)] <- colnames(X) # renaming first 4 outputs
s <- structure(list(fit=stan_output,
coef_names=colnames(X),
sigma=sigma,
U=U,
terms=terms(y~marital.happiness + age + no.years.married, data=data),
data=data),
class=c("stan_tobit_upper", "stan_wrapper"))
summary(s)
stan_output['sigma']
type(stan_output)
typeof\(stan_output)
typeof(stan_output)
summary(stan_output, pars=c("mu",'sigma'))
preds
s
stan_output
summary
summary(stan_output, pars=c("mu","sigma"))
summary(stan_output, pars=c("mu","sigma"))
summary(stan_output, pars=c("mu","sigma"))[0]
summary(stan_output, pars=c("mu","sigma"))[1]
summary(stan_output, pars=c("mu","sigma"))[2]
summary(stan_output, pars=c("mu","sigma"))[2][1]
stan_output <-stan(file = "~/Documents/GitHub/bayesian-methods/truncate_data.stan",
data= list(
N_obs = nrow(X_obs),
N_cens = nrow(X_cens),
y_obs = y_obs,
U=U
),
iter = 1000,
warmup = 500,
chains = 2)
library(rethinking)
library(rstan)
y <- model.response(model.frame(y~marital.happiness + age + no.years.married,data))
X <- model.matrix(y~marital.happiness + age + no.years.married, data)
U = 5
X_cens = subset(X, y > U)
X_obs = subset(X,y < U)
y_obs = subset(y,y < U)
K <- ncol(X)
stan_output <-stan(file = "~/Documents/GitHub/bayesian-methods/truncate_data.stan",
data= list(
N_obs = nrow(X_obs),
N_cens = nrow(X_cens),
y_obs = y_obs,
U=U
),
iter = 1000,
warmup = 500,
chains = 2)
summary(stan_output)
stan_output
stan_output
raw <- rnorm(100)
censored <- Filter(function (x) { x < 0.5 }, raw)
n_obs <- length(censored)
d <- list(N_obs=n_obs,
N_cens=length(raw)-n_obs,
y_obs=censored,
censored_threshold=rep(0.5,length(raw) - n_obs)
)
# there is no need for this (I think) if you can specify a lower
# bound on y_cens in the model.
# The maximal lower bound can be unknown, but if you know any
# lower bound that will help
init_f <- function() {
list(censored_threshold=0.5,d=0,y_cens=rep(1,length(raw) - n_obs), mu=0, sigma=1)
}
# may need to fit for more iterations that this to get Rhat
# into a resonable range
fit <- stan("/tmp/model.stan",data=d, iter=10000, chains=4, init=init_f)
# may need to fit for more iterations that this to get Rhat
# into a resonable range
fit <- stan("~/Documents/GitHub/bayesian-methods/truncate_data.stan",data=d, iter=10000, chains=4, init=init_f)
plot(fit)
plot(stan_output)
plot(fit)
# may need to fit for more iterations that this to get Rhat
# into a resonable range
fit <- stan("~/Documents/GitHub/bayesian-methods/truncate_data.stan",data=d, iter=10000, chains=4, init=init_f)
d <- list(N_obs=n_obs,
N_cens=length(raw)-n_obs,
y_obs=censored,
U=rep(0.5,length(raw) - n_obs)
)
# there is no need for this (I think) if you can specify a lower
# bound on y_cens in the model.
# The maximal lower bound can be unknown, but if you know any
# lower bound that will help
init_f <- function() {
list(censored_threshold=0.5,d=0,y_cens=rep(1,length(raw) - n_obs), mu=0, sigma=1)
}
# may need to fit for more iterations that this to get Rhat
# into a resonable range
fit <- stan("~/Documents/GitHub/bayesian-methods/truncate_data.stan",data=d, iter=10000, chains=4, init=init_f)
d <- list(N_obs=n_obs,
N_cens=length(raw)-n_obs,
y_obs=censored,
censored_threshold=rep(0.5,length(raw) - n_obs)
)
# there is no need for this (I think) if you can specify a lower
# bound on y_cens in the model.
# The maximal lower bound can be unknown, but if you know any
# lower bound that will help
init_f <- function() {
list(censored_threshold=0.5,d=0,y_cens=rep(1,length(raw) - n_obs), mu=0, sigma=1)
}
# may need to fit for more iterations that this to get Rhat
# into a resonable range
fit <- stan("~/Documents/GitHub/bayesian-methods/truncate_data.stan",data=d, iter=10000, chains=4, init=init_f)
plot(fit)
fit
y <- model.response(model.frame(y~marital.happiness + age + no.years.married,data))
X <- model.matrix(y~marital.happiness + age + no.years.married, data)
U = 5
X_cens = subset(X, y > U)
X_obs = subset(X,y < U)
y_obs = subset(y,y < U)
K <- ncol(X)
stan_output <-stan(file = "~/Documents/GitHub/bayesian-methods/truncate_data.stan",
data= list(
N_obs = nrow(X_obs),
N_cens = nrow(X_cens),
K = K,
X_obs = X_obs,
X_cens = X_cens,
y_obs = y_obs,
U=U
),
iter = 100,
warmup = 50,
chains = 2)
stan_output <-stan(file = "~/Documents/GitHub/bayesian-methods/truncate_data.stan",
data= list(
N_obs = nrow(X_obs),
N_cens = nrow(X_cens),
K = K,
X_obs = X_obs,
X_cens = X_cens,
y_obs = y_obs,
U=U
),
iter = 1000,
warmup = 500,
chains = 2)
plot(stan_output)
stan_output
summary(stan_output, pars='mu')
summary(stan_output, pars="beta")
summary(stan_output, pars="beta","sigma")
summary(stan_output, pars="sigma")
summary(stan_output, pars=c("sigma","beta")
)
plot(summary(stan_output, pars=c("sigma","beta")))
summary(stan_output, pars=c("sigma","beta"))
k
K
X
summary(stan_output, pars=c("sigma","beta"))
summary(stan_output, pars="beta")
plot(summary(stan_output, pars="beta"))
stan_output['beta']
stan_output[100]
stan_output
stan_output$`beta[1]`
stan_output$beta[1]
plot(stan_output$`beta[1]`_
plot(stan_output$`beta[1]`)
plot(stan_output)
plot(stan_output, pars=c("beta","sigma"))
X
(stan_output, pars=c("beta","sigma"))
summary(stan_output, pars=c("beta","sigma"))
link?
link()
link(m5.4)
library(rethinking)
library(rstan)
library(rethinking)
library(rstan)
link()
link(stan_output)
d
# predictor residual plots
mu <- link(stan_output)
mu_mean <- apply(mu, 2, mean)
mu
mean
mu
R code 5.13
m5.4 <- quap( alist(
M ~ dnorm( mu , sigma ) , mu <- a + bAM * A ,
a ~ dnorm( 0 , 0.2 ) , bAM ~ dnorm( 0 , 0.5 ) , sigma ~ dexp( 1 )
) , data = d )
N <- 50 # number of simulated States age <- rnorm( N ) # sim A mar<-rnorm(N,-age) #simA->M div<-rnorm(N,age) #simA->D
R code 5.13
m5.4 <- quap( alist(
M ~ dnorm( mu , sigma ) , mu <- a + bAM * A ,
a ~ dnorm( 0 , 0.2 ) , bAM ~ dnorm( 0 , 0.5 ) , sigma ~ dexp( 1 )
) , data = d )
plot(stan_output, pars=c("beta", "sigma"))
stan_output
summary(stan_output, pars=c("beta", "sigma"))
# predictor residual plots
mu <- link(stan_output)
mu_mean <- apply(mu, 2, mean)
mu
link?
link()?
help(link)
link(stan_output)
link(stan_output)[0]
link(stan_output)[1]
setwd("~/Documents/GitHub/thesis")
data <- read_excel("Descriptive Statistics.xlsx", col_types='guess')
library("readxl")
set.seed(100)
data <- read_excel("Descriptive Statistics.xlsx", col_types='guess')
data
data <- read_excel("Descriptive Statistics.xlsx", col_types='guess', sheet=1)
data
data <- read_excel("Descriptive Statistics.xlsx", col_types='guess', sheet=2)
data
data$`Issue Date` <- as.Date(data$`Issue Date`)
growth = data[order(data$`Issue Date`, decreasing=FALSE),]
growth$count =1
growth$`Cumulative Count` = cumsum(growth$count)
plot(`Cumulative Count` ~ `Issue Date`, growth, xaxt = "n", type = "l" ,main="SLB Cumulative Issuances Over Time")
axis(1, growth$`Issue Date`, format(growth$`Issue Date`, "%b %y"), cex.axis = .7)
library("readxl")
set.seed(100)
data <- read_excel("Descriptive Statistics.xlsx", col_types='guess', sheet=2)
data$`Issue Date` <- as.Date(data$`Issue Date`)
growth = data[order(data$`Issue Date`, decreasing=FALSE),]
growth$count =1
growth$`Cumulative Count` = cumsum(growth$count)
plot(`Cumulative Count` ~ `Issue Date`, growth, xaxt = "n", type = "l" ,main="SLB Cumulative Issuances Over Time")
axis(1, growth$`Issue Date`, format(growth$`Issue Date`, "%b %y"), cex.axis = .7)
View(data)
View(data)
new_df = data[data$`Yield ask, at issue`<>"#N/A N/A"]
new_df = data[data$`Yield ask, at issue`!="#N/A N/A"]
new_df = data[data$`Yield ask, at issue`!="#N/A N/A",]
new_df$"BICS Level 1_SLB"<- factor(new_df$"BICS Level 1_SLB", exclude=NULL)
new_df = data[data$`Yield ask, at issue`!="#N/A N/A",]
new_df
new_df$"BICS Level 1"<- factor(new_df$"BICS Level 1", exclude=NULL)
indu <- new_df %>% group_by(`BICS Level 1`)
library(grid)
library(gridBase)
library(dplyr)
library(car)
indu <- new_df %>% group_by(`BICS Level 1`)
indu <- indu  %>% summarise(count = n(), amt = sum(`Amt Issued`), yield = mean(`Yield ask, at issue`))
new_df$`Yield ask, at issue`
as.Numeric(new_df$`Yield ask, at issue`)
as.numeric(new_df$`Yield ask, at issue`)
drop_na(new_df,`Yield ask, at issue` )
dropNA(new_df,`Yield ask, at issue` )
DropNA(new_df,`Yield ask, at issue` )
new_df[complete.cases(new_df$`Yield ask, at issue`),]
new_df <- new_df[complete.cases(new_df$`Yield ask, at issue`),]
new_df$"BICS Level 1"<- factor(new_df$"BICS Level 1", exclude=NULL)
indu <- new_df %>% group_by(`BICS Level 1`)
indu <- indu  %>% summarise(count = n(), amt = sum(`Amt Issued`), yield = mean(`Yield ask, at issue`))
indu <- indu[order(indu$amt, decreasing=TRUE),]
new_df <- new_df[complete.cases(new_df$`Yield ask, at issue`),]
new_df$"BICS Level 1"<- factor(new_df$"BICS Level 1", exclude=NULL)
indu <- new_df %>% group_by(`BICS Level 1`)
indu <- indu  %>% summarise(count = n(), amt = sum(`Amt Issued`), yield = mean(`Yield ask, at issue`))
indu
new_df$`Yield ask, at issue`
new_df = data[data$`Yield ask, at issue`!="#N/A N/A",]
new_df$`Yield ask, at issue` <- as.numeric(new_df$`Yield ask, at issue`)
new_df <- new_df[complete.cases(new_df$`Yield ask, at issue`),]
new_df$"BICS Level 1"<- factor(new_df$"BICS Level 1", exclude=NULL)
indu <- new_df %>% group_by(`BICS Level 1`)
indu <- indu  %>% summarise(count = n(), amt = sum(`Amt Issued`), yield = mean(`Yield ask, at issue`))
indu <- indu[order(indu$amt, decreasing=TRUE),]
indu
new_df$"ESG Rating"<- factor(new_df$"ESG Rating", exclude=NULL)
esg <- new_df %>% group_by(`ESG Rating`)
indu <- indu  %>% summarise(count = n(), amt = sum(`Amt Issued`), yield = mean(`Yield ask, at issue`))
indu <- indu[order(indu$amt, decreasing=TRUE),]
esg <- new_df %>% group_by(`ESG Rating`)
esg <- esg  %>% summarise(count = n(), amt = sum(`Amt Issued`), yield = mean(`Yield ask, at issue`))
esg <- esg[order(indu$amt, decreasing=TRUE),]
esg
esg <- new_df %>% group_by(`ESG Rating`)
esg <- esg  %>% summarise(count = n(), amt = sum(`Amt Issued`), yield = mean(`Yield ask, at issue`))
esg
